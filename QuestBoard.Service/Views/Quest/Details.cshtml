@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@model PlayerSignup

@{
    ViewData["Title"] = Model.Quest?.Title;
    var tokens = Antiforgery.GetAndStoreTokens(ViewContext.HttpContext);
}

<div class="row">
    <div class="col-md-8">
        <div class="card modern-card">
            <div class="card-header modern-card-header d-flex justify-content-between align-items-center">
                <h1 class="mb-0">@ViewData["Title"]</h1>
                <span class="badge cr-badge fs-6">
                    <i class="fas fa-dice-d20 me-1"></i>
                    CR @Model.Quest?.ChallengeRating
                </span>
            </div>
            <div class="card-body modern-card-body">
                <p class="lead">@Model.Quest?.Description</p>

                @if (Model.Quest?.IsFinalized == true)
                {var selectedPlayersCount = Model.Quest?.PlayerSignups.Where(ps => ps.IsSelected).Count() ?? 0;
                    var hasSpace = selectedPlayersCount < Model.Quest?.TotalPlayerCount;
                    var currentUserSignedUp = (bool)ViewBag.IsPlayerSignedUp;
                    var userCanJoin = User.Identity?.IsAuthenticated == true && !currentUserSignedUp && hasSpace;

                    @if (currentUserSignedUp)
                    {
                        var currentUser = Model.Player;
                        var userSignup = Model.Quest?.PlayerSignups.FirstOrDefault(ps => ps.Player.Id == currentUser?.Id);

                        <div class="alert alert-success">
                            <h5>You're signed up!</h5>
                            @if (userSignup?.IsSelected == true)
                            {
                                <p><strong>You are selected for this quest!</strong></p>
                                <p><strong>Date:</strong> @Model.Quest?.FinalizedDate?.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")</p>
                            }
                            else
                            {
                                <p>You are on the waitlist for this quest.</p>
                            }
                        </div>
                    }

                    <div class="alert alert-info">
                        <h5>Quest Finalized!</h5>
                        <p><strong>Date & Time:</strong> @Model.Quest?.FinalizedDate?.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")</p>
                        <p><strong>Selected Players:</strong></p>
                        <ul>
                            @foreach (var player in Model.Quest?.PlayerSignups.Where(ps => ps.IsSelected).OrderBy(ps => ps.SignupTime).ToList() ?? [])
                            {
                                <li>@player.Player.Name</li>
                            }
                        </ul>
                        @if (Model.Quest?.PlayerSignups.Where(ps => !ps.IsSelected).Any() == true)
                        {
                            <p><strong>Waitlist:</strong></p>
                            <ul>
                                @foreach (var player in Model.Quest?.PlayerSignups.Where(ps => !ps.IsSelected).OrderBy(ps => ps.SignupTime).ToList() ?? [])
                                {
                                    <li>@player.Player.Name</li>
                                }
                            </ul>
                        }
                    </div>

                    if (userCanJoin)
                    {
                        <div class="card modern-card mb-4">
                            <div class="card-header modern-card-header">
                                <h5>Join This Quest</h5>
                            </div>
                            <div class="card-body modern-card-body">
                                <div class="alert alert-info">
                                    <strong>Joining as:</strong> @Model.Player?.Name (@Model.Player?.Email)
                                </div>

                                <div class="alert alert-success">
                                    <h6>Space Available!</h6>
                                    <p>This quest has space for additional players (@selectedPlayersCount/@Model.Quest?.TotalPlayerCount slots filled).</p>
                                    <p><strong>Quest Date:</strong> @Model.Quest?.FinalizedDate?.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")</p>
                                </div>

                                <form asp-action="JoinFinalizedQuest" method="post">
                                    <input type="hidden" name="questId" value="@Model.Quest?.Id" />
                                    <button type="submit" class="btn btn-success">
                                        <i class="fas fa-plus-circle me-2"></i>Join Quest
                                    </button>
                                </form>
                            </div>
                        </div>
                    }
                }
                else if (!(User.Identity?.IsAuthenticated == true))
                {
                    <div class="alert alert-warning">
                        <h5>Sign In Required</h5>
                        <p>You must <a href="@Url.Action("Login", "Account")" class="alert-link">sign in</a> to sign up for quests.</p>
                        <p>Don't have an account? <a href="@Url.Action("Register", "Account")" class="alert-link">Register here</a>.</p>
                    </div>
                }
                else if (!(bool)ViewBag.IsPlayerSignedUp)
                {
                    <div class="card modern-card mb-4">
                        <div class="card-header modern-card-header">
                            <h5>Sign Up for This Quest</h5>
                        </div>
                        <div class="card-body modern-card-body">
                            <div class="alert alert-info">
                                <strong>Signing up as:</strong> @Model.Player?.Name (@Model.Player?.Email)
                            </div>

                            <form asp-action="Details" method="post">
                                <input type="hidden" name="Id" value="0" />
                                <input type="hidden" name="Quest.Id" value="@Model.Quest?.Id" />

                                <h6>Vote on Proposed Dates:</h6>
                                @for (var i = 0; i < Model.DateVotes.Count; i++)
                                {
                                    var vote = Model.DateVotes[i];
                                    <div class="date-option">
                                        <input type="hidden" name="DateVotes[@i].ProposedDateId" value="@vote.ProposedDateId" />
                                        <input type="hidden" name="DateVotes[@i].PlayerSignupId" value="@vote.PlayerSignupId" />

                                        <div class="d-flex justify-content-between align-items-center">
                                            <strong>@vote.ProposedDate?.Date.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")</strong>
                                            <div class="vote-summary">
                                                @{
                                                    var votes = vote.ProposedDate?.PlayerVotes.GroupBy(v => v.Vote).ToDictionary(g => g.Key, g => g.Count()) ?? [];
                                                    var yesCount = votes.GetValueOrDefault(VoteType.Yes, 0);
                                                    var maybeCount = votes.GetValueOrDefault(VoteType.Maybe, 0);
                                                    var noCount = votes.GetValueOrDefault(VoteType.No, 0);
                                                }
                                                <span class="text-success">✓ @yesCount</span>
                                                <span class="text-warning">? @maybeCount</span>
                                                <span class="text-danger">✗ @noCount</span>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <div class="custom-radio-group">
                                                <input type="radio" name="DateVotes[@i].Vote" value="2" id="yes_[@i]" required style="display: none;">
                                                <label class="custom-radio-label" for="yes_[@i]" data-vote="yes">
                                                    <i class="fas fa-square-check"></i>
                                                    <span>Yes</span>
                                                </label>
                                                
                                                <input type="radio" name="DateVotes[@i].Vote" value="1" id="maybe_[@i]" style="display: none;">
                                                <label class="custom-radio-label" for="maybe_[@i]" data-vote="maybe">
                                                    <i class="fas fa-square-minus"></i>
                                                    <span>Maybe</span>
                                                </label>
                                                
                                                <input type="radio" name="DateVotes[@i].Vote" value="0" id="no_[@i]" style="display: none;">
                                                <label class="custom-radio-label" for="no_[@i]" data-vote="no">
                                                    <i class="fas fa-square-xmark"></i>
                                                    <span>No</span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <button type="submit" class="btn btn-primary">Sign Up & Submit Votes</button>
                            </form>
                        </div>
                    </div>
                }
                else
                {
                    var currentUser = Model.Player;
                    var userSignup = Model.Quest?.PlayerSignups.FirstOrDefault(ps => ps.Player.Id == currentUser?.Id);
                    var userVotes = userSignup?.DateVotes?.ToDictionary(v => v.ProposedDateId, v => v.Vote) ?? new Dictionary<int, VoteType>();
                    
                    <div class="alert alert-success">
                        <h5>You're signed up!</h5>
                        <p>Thank you for signing up. You'll be notified when the quest is finalized.</p>
                        
                        @if (userVotes.Any())
                        {
                            <hr>
                            <h6>Your Date Preferences:</h6>
                            @foreach (var proposedDate in Model.Quest?.ProposedDates ?? [])
                            {
                                var userVote = userVotes.GetValueOrDefault(proposedDate.Id);
                                var voteText = userVote switch
                                {
                                    VoteType.Yes => "✓ Yes",
                                    VoteType.Maybe => "? Maybe",
                                    VoteType.No => "✗ No",
                                    _ => "No vote"
                                };
                                var voteClass = userVote switch
                                {
                                    VoteType.Yes => "text-success",
                                    VoteType.Maybe => "text-warning",
                                    VoteType.No => "text-danger",
                                    _ => "text-muted"
                                };
                                
                                <div class="d-flex justify-content-between align-items-center py-1">
                                    <span>@proposedDate.Date.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")</span>
                                    <span class="@voteClass fw-bold">@voteText</span>
                                </div>
                            }
                        }
                    </div>
                    
                    @* Update signup form - hidden by default *@
                    <div class="card modern-card mb-4" id="updateSignupForm" style="display: none;">
                        <div class="card-header modern-card-header">
                            <h5>Update Your Signup</h5>
                        </div>
                        <div class="card-body modern-card-body">
                            <form asp-action="UpdateSignup" method="post">
                                <input type="hidden" name="questId" value="@Model.Quest?.Id" />
                                
                                <h6>Update Your Date Preferences:</h6>
                                @for (var i = 0; i < (Model.Quest?.ProposedDates.Count ?? 0); i++)
                                {
                                    var proposedDate = Model.Quest?.ProposedDates.ElementAt(i);
                                    var currentVote = userVotes.GetValueOrDefault(proposedDate?.Id ?? 0);
                                    
                                    <div class="date-option">
                                        <input type="hidden" name="DateVotes[@i].ProposedDateId" value="@proposedDate?.Id" />
                                        
                                        <div class="d-flex justify-content-between align-items-center">
                                            <strong>@proposedDate?.Date.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")</strong>
                                            <div class="vote-summary">
                                                @{
                                                    var votes = proposedDate?.PlayerVotes.GroupBy(v => v.Vote).ToDictionary(g => g.Key, g => g.Count()) ?? [];
                                                    var yesCount = votes.GetValueOrDefault(VoteType.Yes, 0);
                                                    var maybeCount = votes.GetValueOrDefault(VoteType.Maybe, 0);
                                                    var noCount = votes.GetValueOrDefault(VoteType.No, 0);
                                                }
                                                <span class="text-success">✓ @yesCount</span>
                                                <span class="text-warning">? @maybeCount</span>
                                                <span class="text-danger">✗ @noCount</span>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <div class="custom-radio-group">
                                                <input type="radio" name="DateVotes[@i].Vote" value="2" id="update_yes_[@i]" @(currentVote == VoteType.Yes ? "checked" : "") required style="display: none;">
                                                <label class="custom-radio-label" for="update_yes_[@i]" data-vote="yes">
                                                    <i class="fas fa-square-check"></i>
                                                    <span>Yes</span>
                                                </label>
                                                
                                                <input type="radio" name="DateVotes[@i].Vote" value="1" id="update_maybe_[@i]" @(currentVote == VoteType.Maybe ? "checked" : "") style="display: none;">
                                                <label class="custom-radio-label" for="update_maybe_[@i]" data-vote="maybe">
                                                    <i class="fas fa-square-minus"></i>
                                                    <span>Maybe</span>
                                                </label>
                                                
                                                <input type="radio" name="DateVotes[@i].Vote" value="0" id="update_no_[@i]" @(currentVote == VoteType.No ? "checked" : "") style="display: none;">
                                                <label class="custom-radio-label" for="update_no_[@i]" data-vote="no">
                                                    <i class="fas fa-square-xmark"></i>
                                                    <span>No</span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                }
                                
                                <div class="mt-3">
                                    <button type="submit" class="btn btn-primary me-2">
                                        <i class="fas fa-check me-2"></i>Update Signup
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="hideUpdateForm()">
                                        <i class="fas fa-times me-2"></i>Cancel
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                }

                @* Revoke and Update button section - shown for any signed up user *@
                @if (User.Identity?.IsAuthenticated == true && (bool)ViewBag.IsPlayerSignedUp)
                {
                    <div class="d-flex gap-2">
                        @if (Model.Quest?.IsFinalized != true)
                        {
                            <button type="button" class="btn btn-primary" onclick="showUpdateForm()">
                                <i class="fas fa-edit me-2"></i>Update Signup
                            </button>
                        }
                        <button type="button" class="btn btn-danger" onclick="revokeSignup(@ViewContext.RouteData.Values["id"])">
                            <i class="fas fa-times me-2"></i>Revoke My Signup
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card modern-card">
            <div class="card-header modern-card-header">
                <h5>Quest Summary</h5>
            </div>
            <div class="card-body modern-card-body">
                <p><strong>DM:</strong> @Model.Quest?.DungeonMaster?.Name</p>
                <p><strong>Status:</strong>
                    <span class="badge @(Model.Quest?.IsFinalized == true ? "bg-secondary" : "bg-success")">
                        @(Model.Quest?.IsFinalized == true ? "Finalized" : "Open for Signups")
                    </span>
                </p>
                <p><strong>Building Access:</strong>
                    @{
                        var dmHasKey = Model.Quest?.DungeonMaster?.HasKey == true;
                        var playersHaveKey = Model.Quest?.PlayerSignups?.Any(ps => ps.Player.HasKey == true) == true;
                        var anyoneHasKey = dmHasKey || playersHaveKey;
                    }
                    <span class="badge @(anyoneHasKey ? "bg-success" : "bg-danger")">
                        @if (anyoneHasKey)
                        {
                            <i class="fas fa-key me-1"></i>@:Available
                        }
                        else
                        {
                            <i class="fas fa-lock me-1"></i>@:No Key
                        }
                    </span>
                </p>
                @if (Model.Quest?.IsFinalized == true)
                {
                    <p><strong>Selected Players:</strong> @Model.Quest?.PlayerSignups.Where(ps => ps.IsSelected).Count()/6</p>
                    <p><strong>Total Signups:</strong> @Model.Quest?.PlayerSignups.Count</p>
                }
                else
                {
                    <p><strong>Players Signed Up:</strong> @Model.Quest?.PlayerSignups.Count</p>
                    <p><strong>Target Players:</strong> 6</p>
                }
                <p><strong>Created:</strong> @Model.Quest?.CreatedAt.ToString("MMM dd, yyyy")</p>

                @if (Model.Quest?.PlayerSignups.Any() == true)
                {
                    <hr>
                    <h6>Current Signups:</h6>
                    <div class="player-list">
                        @foreach (var signup in Model.Quest?.PlayerSignups.OrderBy(ps => ps.SignupTime).ToList() ?? [])
                        {
                            <div class="d-flex justify-content-between align-items-center py-1">
                                <span>@signup.Player.Name</span>
                                <small class="text-muted">@signup.SignupTime.ToString("MMM dd")</small>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        @if ((bool)ViewBag.CanManage)
        {
            <div class="card modern-card mt-3">
                <div class="card-header modern-card-header">
                    <h5>DM Controls</h5>
                </div>
                <div class="card-body modern-card-body">
                    <a href="@Url.Action("Manage", "Quest", new { id = Model.Quest.Id })" class="btn btn-primary btn-sm">
                        Manage Quest
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<script>
    function revokeSignup(questId) {
        if (confirm("Are you sure you want to revoke your signup for this quest? This action cannot be undone.")) {
            const formData = new FormData();
            formData.append('__RequestVerificationToken', '@tokens.RequestToken');
            
            fetch(`/Quest/RevokeSignup/${questId}`, {
                method: "DELETE",
                body: formData
            }).then(res => {
                if (res.ok) {
                    location.reload();
                } else {
                    res.text().then(text => {
                        alert(`Failed to revoke signup: ${text}`);
                    });
                }
            }).catch(err => {
                alert("An error occurred while revoking signup.");
            });
        }
    }
    
    function showUpdateForm() {
        document.getElementById('updateSignupForm').style.display = 'block';
        document.querySelector('[onclick="showUpdateForm()"]').style.display = 'none';
    }
    
    function hideUpdateForm() {
        document.getElementById('updateSignupForm').style.display = 'none';
        document.querySelector('[onclick="showUpdateForm()"]').style.display = 'inline-block';
    }
</script>
